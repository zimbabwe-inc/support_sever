from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from app.fs_machine import SupportState
from helpers import get_ticket, update_ticket, time_for_answer, add_new_chat, load_all, delete_chat
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
admin_router = Router()

@admin_router.callback_query(F.data.startswith(("resolve", "reject")))
async def handle_admin_answer(callback: CallbackQuery, state: FSMContext):
    action, ticket_id = callback.data.split(":")
    ticket_id = int(ticket_id)
    ticket = get_ticket(ticket_id)
    user_id = ticket["user_id"]
    await state.set_state(SupportState.waiting_answer_text)
    await state.update_data(ticket_id=ticket_id, action=action, user_id=user_id)

    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await callback.answer()


@admin_router.message(SupportState.waiting_answer_text)
async def support_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = data["ticket_id"]
    action = data["action"]
    user_id = data["user_id"]
    ticket = get_ticket(ticket_id)
    
    if action == "resolve":
        ticket["status"] = "resolved"
        ticket = time_for_answer(ticket)
        text = "‚úÖ –†–µ—à—ë–Ω!"
        update_ticket(ticket, "resolved_tickets.json")
    else:
        ticket["status"] = "rejected"
        ticket = time_for_answer(ticket)
        text = "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω."
        update_ticket(ticket, "rejected_tickets.json")
    
    await message.bot.send_message(
        user_id, 
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {text}.\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}"
    )

@admin_router.callback_query(F.data == "add_chat")
async def add_chat_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "üÜï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:\n\n"
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞* (–ø—Ä–∏–º–µ—Ä: `repay` –∏–ª–∏ `support`).",
        parse_mode="Markdown"
    )
    await state.set_state(SupportState.add_chat)

@admin_router.message(SupportState.add_chat)
async def add_chat_name(message: Message, state: FSMContext):
    await state.update_data(chat_name=message.text.strip())
    await message.answer(
        "2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *Chat ID* —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ø—Ä–∏–º–µ—Ä: `-1003177380600`).",
        parse_mode="Markdown"
    )
    await message.delete()
    await state.set_state(SupportState.add_chat_id)

@admin_router.message(SupportState.add_chat_id)
async def add_chat_id(message: Message, state: FSMContext):
    try:
        chat_id = int(message.text.strip())
        await state.update_data(chat_id=chat_id)
        await message.answer(
            "3Ô∏è‚É£ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
            "–∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.",
            parse_mode="Markdown"
        )
        await message.delete()
        await state.set_state(SupportState.add_chat_message)
    except ValueError:
        await message.answer("–ê–π–¥–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ -1003177380600")
        await message.delete()
        await state.set_state(SupportState.add_chat_id)

@admin_router.message(SupportState.add_chat_message)
async def add_chat_message(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_name = data["chat_name"]
    chat_id = data["chat_id"]
    chat_message = message.text.strip()

    new_chat = {
        chat_name: {
            "chat_id": chat_id,
            "message": chat_message
        }
    }

    add_new_chat(new_chat)

    await message.answer(
        f"‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_name}\n"
        f"**Chat ID:** `{chat_id}`\n"
        f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {chat_message}",
        parse_mode="Markdown",
        callback_data="start"
    )
    await message.delete()
    await state.clear()


@admin_router.callback_query(F.data == "delete_chat")
async def start_delete_chat(callback: CallbackQuery, state: FSMContext):

    chats = load_all("chat.json")
    if not chats:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardBuilder()
    for chat_name in chats.keys():
        kb.button(text=f"‚ùå {chat_name.upper()}", callback_data=f"confirm_delete:{chat_name}")
    kb.adjust(1)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb.as_markup())

@admin_router.callback_query(F.data.startswith("confirm_delete"))
async def delete_chat_confirm(callback: CallbackQuery, state: FSMContext):
    chat_name = callback.data.split(":", 1)[1]

    if not chat_name:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚Äî —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if delete_chat(chat_name):
        await callback.message.answer(text=f"‚úÖ –ß–∞—Ç '{chat_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", callback_data="start")
    else:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ '{chat_name}'.")
    await state.clear()
    
@admin_router.callback_query(F.data == "cancel_delete", SupportState.delete_chat)
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
